/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaces;

import EDD.Grafo;

/**
 *
 * @author Gloria
 */
public class BuscarTodasLasPalabras extends javax.swing.JFrame {
    public static Grafo grafo;
    public static String[] diccionario;
    public static char[][] tablero;
    public static Cargar ventanaCargarOriginal;
    /**
     * Creates new form BuscarTodasLasPalabras
     */
    public BuscarTodasLasPalabras(Grafo g, String[] dict, char[][] tab, Cargar v1) {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JLabelTitulo = new javax.swing.JLabel();
        jScrollPaneResultados = new javax.swing.JScrollPane();
        textAreaResultados = new javax.swing.JTextArea();
        jLabelTiempo = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        botonRegresar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JLabelTitulo.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        JLabelTitulo.setText("Palabras Encontradas");
        getContentPane().add(JLabelTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 20, -1, -1));

        textAreaResultados.setEditable(false);
        textAreaResultados.setColumns(20);
        textAreaResultados.setRows(5);
        jScrollPaneResultados.setViewportView(textAreaResultados);

        getContentPane().add(jScrollPaneResultados, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 110, -1, 110));

        jLabelTiempo.setText("Tiempo de busqueda");
        getContentPane().add(jLabelTiempo, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 260, -1, -1));

        jButton1.setText("DFS");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, -1, -1));

        botonRegresar.setText("Regresar");
        botonRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRegresarActionPerformed(evt);
            }
        });
        getContentPane().add(botonRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, -1, -1));

        jButton2.setText("BFS");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 70, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRegresarActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        Menu menuNuevo = new Menu(this.ventanaCargarOriginal);
        menuNuevo.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_botonRegresarActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.out.println("DEBUG (BuscarPalabra): Iniciando búsqueda de todas las palabras.");

        // Verificación de que los datos necesarios no sean nulos o vacíos.
        if (this.grafo == null || this.diccionario == null || this.tablero == null || this.diccionario.length == 0) {
            String errorMsg = "ERROR (BuscarPalabra): Datos incompletos para iniciar la búsqueda.";
            System.err.println(errorMsg); // Para depuración
            textAreaResultados.setText(errorMsg + "\nPor favor, asegúrate de cargar el archivo correctamente desde el menú principal.");
            jLabelTiempo.setText("Tiempo de búsqueda: Error de datos");
            return;
        }

        long startTime = System.currentTimeMillis(); // Captura el tiempo de inicio de la búsqueda.

        StringBuilder resultadosBuilder = new StringBuilder(); // Se usa para construir el texto de resultados sin java.util.List
        int palabrasEncontradasCount = 0; // Contador de palabras encontradas.

        // Itera sobre cada palabra presente en el diccionario.
        for (int i = 0; i < diccionario.length; i++) {
            String palabra = diccionario[i];
            // Omite palabras nulas, vacías o que solo contengan espacios.
            if (palabra == null || palabra.trim().isEmpty()) {
                continue;
            }
            palabra = palabra.trim().toUpperCase(); // Normaliza la palabra (sin espacios, mayúsculas).

            // Requisito del proyecto: Una palabra válida debe tener al menos 3 letras.
            if (palabra.length() < 3) {
                System.out.println("DEBUG (BuscarPalabra): Palabra '" + palabra + "' ignorada, menos de 3 letras.");
                continue; // Salta a la siguiente palabra del diccionario.
            }

            System.out.println("DEBUG (BuscarPalabra): Buscando palabra: " + palabra);

            boolean foundInBoard = false; // Bandera para saber si la palabra ya fue encontrada en el tablero.
            // Para cada palabra, se intenta encontrarla comenzando desde cada celda del tablero (4x4).
            for (int r = 0; r < 4; r++) { // Bucle para filas (0 a 3)
                for (int c = 0; c < 4; c++) { // Bucle para columnas (0 a 3)
                    // Se crea una nueva matriz 'visited' para cada intento de búsqueda de la palabra
                    // desde una celda inicial diferente, asegurando que cada búsqueda sea independiente.
                    boolean[][] visited = new boolean[4][4];
                    // Llama a la función recursiva de búsqueda (DFS).
                    if (grafo.buscarPalabraEnCelda(palabra, r, c, visited, 0, this.grafo, this.diccionario, this.tablero)) { // 0 es el índice de la primera letra de la palabra.
                        palabrasEncontradasCount++; // Incrementa el contador de palabras encontradas.
                        resultadosBuilder.append("- ").append(palabra).append("\n"); // Añade la palabra al StringBuilder.
                        System.out.println("DEBUG (BuscarPalabra): Palabra encontrada: " + palabra);
                        foundInBoard = true; // Marca que la palabra fue encontrada.
                        break; // Sale del bucle de columnas, ya que la palabra se encontró.
                    }
                }
                if (foundInBoard) {
                    break; // Sale del bucle de filas, ya que la palabra se encontró.
                }
            }
        }

        long endTime = System.currentTimeMillis(); // Captura el tiempo de finalización.
        long duration = endTime - startTime; // Calcula la duración total en milisegundos.

        // Muestra los resultados y el tiempo en el JTextArea y JLabel correspondientes.
        if (palabrasEncontradasCount == 0) {
            textAreaResultados.setText("No se encontraron palabras del diccionario en la sopa de letras.");
        } else {
            textAreaResultados.setText("Palabras encontradas (" + palabrasEncontradasCount + "):\n" + resultadosBuilder.toString());
        }
        jLabelTiempo.setText("Tiempo de búsqueda: " + duration + " ms"); // Actualiza el JLabel del tiempo.

        System.out.println("DEBUG (BuscarPalabra): Resultados finales:\n" + textAreaResultados.getText());
        System.out.println("DEBUG (BuscarPalabra): Tiempo total de búsqueda: " + duration + " ms");
    

    
    }//GEN-LAST:event_jButton1ActionPerformed
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BuscarTodasLasPalabras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BuscarTodasLasPalabras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BuscarTodasLasPalabras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BuscarTodasLasPalabras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BuscarTodasLasPalabras(grafo, diccionario, tablero, ventanaCargarOriginal).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JLabelTitulo;
    private javax.swing.JButton botonRegresar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabelTiempo;
    private javax.swing.JScrollPane jScrollPaneResultados;
    private javax.swing.JTextArea textAreaResultados;
    // End of variables declaration//GEN-END:variables
}
