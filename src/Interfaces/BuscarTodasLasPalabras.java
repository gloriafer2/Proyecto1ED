/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaces;

import EDD.Grafo;

/**
 *
 * @author Gloria
 */
public class BuscarTodasLasPalabras extends javax.swing.JFrame {
    public static Grafo grafo;
    public static String[] diccionario;
    public static char[][] tablero;
    public static Cargar ventanaCargarOriginal;
    
    /**
     * Constructor de la clase `BuscarTodasLasPalabras`.
     * Inicializa los componentes de la GUI y establece las referencias estáticas
     * a los objetos de datos compartidos (grafo, diccionario, tablero, y la ventana `Cargar`).
     *
     * @param g La instancia del `Grafo` que contiene el tablero y los métodos de búsqueda.
     * @param dict El arreglo de Strings que conforma el diccionario de palabras.
     * @param tab La matriz de caracteres que representa el tablero de la sopa de letras.
     * @param v1 La instancia de la ventana `Cargar` desde la cual se invocó esta ventana.
     */
    
    public BuscarTodasLasPalabras(Grafo g, String[] dict, char[][] tab, Cargar v1) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        BuscarTodasLasPalabras.grafo = g; 
        BuscarTodasLasPalabras.diccionario = dict;
        BuscarTodasLasPalabras.tablero = tab;
        BuscarTodasLasPalabras.ventanaCargarOriginal = v1;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JLabelTitulo = new javax.swing.JLabel();
        jScrollPaneResultados = new javax.swing.JScrollPane();
        textAreaResultados = new javax.swing.JTextArea();
        jLabelTiempo = new javax.swing.JLabel();
        DfsBoton = new javax.swing.JButton();
        botonRegresar = new javax.swing.JButton();
        BfsBoton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JLabelTitulo.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        JLabelTitulo.setText("Palabras Encontradas");
        getContentPane().add(JLabelTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 20, -1, -1));

        textAreaResultados.setEditable(false);
        textAreaResultados.setColumns(20);
        textAreaResultados.setRows(5);
        jScrollPaneResultados.setViewportView(textAreaResultados);

        getContentPane().add(jScrollPaneResultados, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 110, -1, 110));

        jLabelTiempo.setText("Tiempo de busqueda");
        getContentPane().add(jLabelTiempo, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 260, 210, -1));

        DfsBoton.setText("DFS");
        DfsBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DfsBotonActionPerformed(evt);
            }
        });
        getContentPane().add(DfsBoton, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, -1, -1));

        botonRegresar.setText("Regresar");
        botonRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRegresarActionPerformed(evt);
            }
        });
        getContentPane().add(botonRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, -1, -1));

        BfsBoton.setText("BFS");
        BfsBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BfsBotonActionPerformed(evt);
            }
        });
        getContentPane().add(BfsBoton, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 70, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
     /**
     * Maneja el evento de acción del botón "Regresar".
     * Oculta la ventana actual (`BuscarTodasLasPalabras`) y muestra la ventana del `Menu` principal,
     * pasando la referencia a la ventana `Cargar` original para mantener los datos cargados.
     * Finalmente, libera los recursos de esta ventana.
     *
     * @param evt El evento de acción generado por el botón.
     */
    private void botonRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRegresarActionPerformed
      
        this.setVisible(false);
        Menu menuNuevo = new Menu(this.ventanaCargarOriginal);
        menuNuevo.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_botonRegresarActionPerformed

    
    /**
     * Maneja el evento de acción del botón "BFS".
     * Realiza una búsqueda de todas las palabras del diccionario en el tablero utilizando
     * el algoritmo de Búsqueda en Amplitud (BFS). Muestra las palabras encontradas y
     * el tiempo que tomó la búsqueda en el área de texto de resultados y en la etiqueta de tiempo.
     *
     * @param evt El evento de acción generado por el botón.
     */
    private void BfsBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BfsBotonActionPerformed
       
        textAreaResultados.setText("Buscando palabras (BFS)...\n"); 

        
        if (BuscarTodasLasPalabras.grafo == null || BuscarTodasLasPalabras.diccionario == null || BuscarTodasLasPalabras.diccionario.length == 0) {
            String mensajeError = "ERROR (BuscarTodasLasPalabras): Datos incompletos para iniciar la búsqueda.\n"
                                + "Asegúrate de cargar el archivo correctamente desde el menú principal.";
            System.err.println(mensajeError);
            textAreaResultados.setText(mensajeError);
            jLabelTiempo.setText("Tiempo de búsqueda: Error de datos");
            return; 
        }

       
        long tiempoInicio = System.currentTimeMillis(); 
        StringBuilder constructorResultados = new StringBuilder(); 

        
        String[] arregloPalabrasEncontradas = new String[200];
        int contadorPalabrasEncontradas = 0; 

        int numFilas = grafo.getNumFilasTablero();
        int numColumnas = grafo.getNumColumnasTablero();

        for (int i = 0; i < diccionario.length; i++) {
            String palabraDiccionario = diccionario[i];
           
            if (palabraDiccionario == null || palabraDiccionario.trim().isEmpty()) {
                continue; 
            }
            palabraDiccionario = palabraDiccionario.trim().toUpperCase(); 

            
            if (palabraDiccionario.length() < 3) {
                continue;
            }

            boolean yaEncontrada = false;
            for (int k = 0; k < contadorPalabrasEncontradas; k++) {
                if (arregloPalabrasEncontradas[k] != null && arregloPalabrasEncontradas[k].equals(palabraDiccionario)) {
                    yaEncontrada = true;
                    break;
                }
            }
            if (yaEncontrada) {
                continue; 
            }

            
            boolean palabraActualEncontradaEnTablero = false;
            for (int f = 0; f < numFilas; f++) {
                for (int c = 0; c < numColumnas; c++) {
                    if (grafo.buscarPalabraEnCeldaBFS(palabraDiccionario, f, c)) {
                        if (contadorPalabrasEncontradas < arregloPalabrasEncontradas.length) {
                            arregloPalabrasEncontradas[contadorPalabrasEncontradas] = palabraDiccionario;
                            contadorPalabrasEncontradas++;
                        } else {
                            System.err.println("Advertencia: El arreglo de palabras encontradas está lleno. No se pueden almacenar más palabras.");
                        }
                        palabraActualEncontradaEnTablero = true;
                        break; 
                    }
                }
                if (palabraActualEncontradaEnTablero) {
                    break; 
                }
            }
        }
        long tiempoFin = System.currentTimeMillis();
        long duracion = tiempoFin - tiempoInicio;
        if (contadorPalabrasEncontradas == 0) {
            textAreaResultados.setText("No se encontraron palabras del diccionario en la sopa de letras usando BFS.");
        } else {
            constructorResultados.append("Palabras encontradas (BFS) (").append(contadorPalabrasEncontradas).append("):\n");
            for (int k = 0; k < contadorPalabrasEncontradas; k++) {
                constructorResultados.append("- ").append(arregloPalabrasEncontradas[k]).append("\n");
            }
            textAreaResultados.setText(constructorResultados.toString());
        }
        jLabelTiempo.setText("Tiempo de búsqueda (BFS): " + duracion + " ms");

    }//GEN-LAST:event_BfsBotonActionPerformed

    /**
     * Maneja el evento de acción del botón "DFS".
     * Realiza una búsqueda de todas las palabras del diccionario en el tablero utilizando
     * el algoritmo de Búsqueda en Profundidad (DFS). Muestra las palabras encontradas y
     * el tiempo que tomó la búsqueda en el área de texto de resultados y en la etiqueta de tiempo.
     *
     * @param evt El evento de acción generado por el botón.
     */
    private void DfsBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DfsBotonActionPerformed

        textAreaResultados.setText("Buscando palabras...\n");

        if (BuscarTodasLasPalabras.grafo == null || BuscarTodasLasPalabras.diccionario == null
                || BuscarTodasLasPalabras.diccionario.length == 0) {
            String errorMsg = "ERROR (BuscarTodasLasPalabras): Datos incompletos para iniciar la búsqueda.\n"
                    + "Asegúrate de cargar el archivo correctamente desde el menú principal.";
            System.err.println(errorMsg);
            textAreaResultados.setText(errorMsg);
            jLabelTiempo.setText("Tiempo de búsqueda: Error de datos");
            return;
        }

        long startTime = System.currentTimeMillis();
        StringBuilder resultadosBuilder = new StringBuilder();

       
        String[] palabrasEncontradasArray = new String[BuscarTodasLasPalabras.diccionario.length]; 
        int palabrasEncontradasCount = 0;

        int rows = grafo.getNumFilasTablero();
        int cols = grafo.getNumColumnasTablero();

        for (int i = 0; i < diccionario.length; i++) {
            String palabra = diccionario[i];
            if (palabra == null || palabra.trim().isEmpty()) {
                continue;
            }
            palabra = palabra.trim().toUpperCase();

            if (palabra.length() < 3) {
                continue;
            }

        
            boolean alreadyFound = false;
            for (int k = 0; k < palabrasEncontradasCount; k++) {
                if (palabrasEncontradasArray[k] != null && palabrasEncontradasArray[k].equals(palabra)) {
                    alreadyFound = true;
                    break;
                }
            }
            if (alreadyFound) {
                continue;
            }

            System.out.println("DEBUG (BuscarTodasLasPalabras): Buscando palabra: " + palabra);

            boolean foundCurrentWordInBoard = false;
            for (int r = 0; r < rows; r++) {
                for (int c = 0; c < cols; c++) {
                    
                    if (grafo.buscarPalabraEnCeldaDFS(palabra, r, c)) {

                        if (palabrasEncontradasCount < palabrasEncontradasArray.length) {
                            palabrasEncontradasArray[palabrasEncontradasCount] = palabra;
                            palabrasEncontradasCount++;
                        } else {
                            System.err.println("Advertencia: El arreglo de palabras encontradas está lleno. No se pueden almacenar más palabras.");
                        }
                        foundCurrentWordInBoard = true;
                        break; 
                    }
                }
                if (foundCurrentWordInBoard) {
                    break; 
                }
            }
        }

        long endTime = System.currentTimeMillis();
        long duration = endTime - startTime;

        if (palabrasEncontradasCount == 0) {
            textAreaResultados.setText("No se encontraron palabras del diccionario en la sopa de letras.");
        } else {
            resultadosBuilder.append("Palabras encontradas (").append(palabrasEncontradasCount).append("):\n");
            for (int k = 0; k < palabrasEncontradasCount; k++) { 
                resultadosBuilder.append("- ").append(palabrasEncontradasArray[k]).append("\n");
            }
            textAreaResultados.setText(resultadosBuilder.toString());
        }

        jLabelTiempo.setText("Tiempo de búsqueda: " + duration + " ms");

    
        
        
        
    }//GEN-LAST:event_DfsBotonActionPerformed
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BuscarTodasLasPalabras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BuscarTodasLasPalabras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BuscarTodasLasPalabras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BuscarTodasLasPalabras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

       
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BuscarTodasLasPalabras(grafo, diccionario, tablero, ventanaCargarOriginal).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BfsBoton;
    private javax.swing.JButton DfsBoton;
    private javax.swing.JLabel JLabelTitulo;
    private javax.swing.JButton botonRegresar;
    private javax.swing.JLabel jLabelTiempo;
    private javax.swing.JScrollPane jScrollPaneResultados;
    private javax.swing.JTextArea textAreaResultados;
    // End of variables declaration//GEN-END:variables
}
