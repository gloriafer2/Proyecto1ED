
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaces;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import EDD.Grafo;

/**
 *
 * @author Gloria
 */

    
  public class Cargar extends javax.swing.JFrame {

    public Grafo grafo;
    public String[] diccionario;
    public char[][] tablero;

    public Cargar() {
        initComponents();
        this.setLocationRelativeTo(null); 
        this.setResizable(false); 
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        botonCargarArchivo = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaTablero = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaDiccionario = new javax.swing.JTextArea();
        botonContinuar = new javax.swing.JButton();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("cargar sopa de letras y diccionario");

        botonCargarArchivo.setText("Cargar Archivo...");
        botonCargarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCargarArchivoActionPerformed(evt);
            }
        });

        jLabel4.setText("Tablero 4x4");

        jLabel5.setText("Diccionario:");

        textAreaTablero.setEditable(false);
        textAreaTablero.setColumns(20);
        textAreaTablero.setRows(5);
        jScrollPane1.setViewportView(textAreaTablero);

        textAreaDiccionario.setEditable(false);
        textAreaDiccionario.setColumns(20);
        textAreaDiccionario.setRows(5);
        jScrollPane2.setViewportView(textAreaDiccionario);

        botonContinuar.setText("continuar");
        botonContinuar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContinuarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(109, 109, 109))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(botonCargarArchivo))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(jLabel1)))
                .addContainerGap(348, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(botonContinuar))
                .addGap(49, 49, 49))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonCargarArchivo)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botonContinuar)
                .addGap(0, 21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Maneja el evento de acción del botón "Cargar Archivo...".
     * Abre un `JFileChooser` para que el usuario seleccione un archivo.
     * Si se selecciona un archivo, intenta leerlo y procesar su contenido
     * para cargar el tablero y el diccionario. Muestra mensajes de éxito o error.
     *
     * @param evt El evento de acción generado por el botón.
     */
    private void botonCargarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCargarArchivoActionPerformed
       
    JFileChooser fileChooser = new JFileChooser();
        int seleccion = fileChooser.showOpenDialog(this);

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File archivo = fileChooser.getSelectedFile();
            try {
                leerArchivoDeConfiguracion(archivo);
                mostrarTableroEnGUI();
                mostrarDiccionarioEnGUI();
                JOptionPane.showMessageDialog(this, "Archivo cargado exitosamente.", "Carga Completa", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al leer el archivo: " + e.getMessage(), "Error de Archivo", JOptionPane.ERROR_MESSAGE);
                System.err.println("Error de IO al cargar archivo: " + e.getMessage());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                System.err.println("Error general al cargar archivo: " + e.getMessage()); 
               
            }
        }
    
    }//GEN-LAST:event_botonCargarArchivoActionPerformed

    
    /**
     * Maneja el evento de acción del botón "Continuar".
     * Verifico si el grafo, tablero y diccionario se han cargado correctamente.
     * Si es así, oculta la ventana actual y muestra el `Menu` principal,
     * pasándose a sí mismo (`this`) para que `Menu` pueda acceder a los datos cargados.
     * Si los datos no están completos, muestra una advertencia al usuario.
     *
     * @param evt El evento de acción generado por el botón.
     */
    
    private void botonContinuarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContinuarActionPerformed
       
 if (grafo != null && tablero != null && diccionario != null && diccionario.length > 0) {
            this.setVisible(false);
            
            Menu menuPrincipal = new Menu(this); 
            menuPrincipal.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Debe cargar un archivo válido antes de continuar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_botonContinuarActionPerformed
/**
     * Método principal para iniciar la aplicación.
     * Configura el Look and Feel de la interfaz de usuario a "Nimbus" para una apariencia moderna.
     * Crea y muestra una nueva instancia de `Cargar` en el Event Dispatch Thread (EDT).
     *
     * @param args Los argumentos de la línea de comandos.
     */
    
    public static void main(String args[]) {
       try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
         } catch (ClassNotFoundException ex) {
          
            System.err.println("Error: ClassNotFoundException: " + ex.getMessage());
        } catch (InstantiationException ex) {
           
            System.err.println("Error: InstantiationException: " + ex.getMessage());
        } catch (IllegalAccessException ex) {
            
            System.err.println("Error: IllegalAccessException: " + ex.getMessage());
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
          
            System.err.println("Error: UnsupportedLookAndFeelException: " + ex.getMessage());
        }
        //</editor-fold>

        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cargar().setVisible(true);
            }
        });
    }
    
    
    
    /**
     * Lee y procesa el contenido de un archivo de configuración para extraer
     * el tablero de la sopa de letras y el diccionario de palabras.
     * El archivo debe seguir un formato específico con secciones `tab` y `dic`.
     *
     * @param archivo El objeto `File` que representa el archivo a leer.
     * @throws IOException Si ocurre un error de lectura/escritura del archivo.
     * @throws Exception Si el formato del archivo es incorrecto (ej. tablero no 4x4, datos faltantes).
     */
    
    private void leerArchivoDeConfiguracion(File archivo) throws IOException, Exception {
        BufferedReader br = null;
        String line;

        boolean inDic = false;
        boolean inTab = false;

        StringBuilder diccionarioContent = new StringBuilder();
        String tableroContentLine = null;

        try {
            br = new BufferedReader(new FileReader(archivo));
            while ((line = br.readLine()) != null) {
                line = line.trim();

                if (line.isEmpty()) {
                    continue;
                }

                System.out.println("DEBUG: Leyendo línea: [" + line + "]");

                if (line.equals("dic")) {
                    inDic = true;
                    inTab = false;
                    System.out.println("DEBUG: Entrando en sección dic.");
                    continue;
                } else if (line.equals("/dic")) {
                    inDic = false;
                    System.out.println("DEBUG: Saliendo de sección dic.");
                    continue;
                } else if (line.equals("tab")) {
                    inTab = true;
                    inDic = false;
                    tableroContentLine = null; 
                    System.out.println("DEBUG: Entrando en sección tab.");
                    continue;
                } else if (line.equals("/tab")) {
                    inTab = false;
                    System.out.println("DEBUG: Saliendo de sección tab.");
                    continue;
                }

                if (inDic) {
                    diccionarioContent.append(line).append("\n");
                } else if (inTab) {
                    if (tableroContentLine != null) {
                        throw new Exception("Se encontró más de una línea de tablero dentro de la sección 'tab'.");
                    }
                    tableroContentLine = line;
                    System.out.println("DEBUG: Contenido de tablero leido (temporal): [" + tableroContentLine + "]");
                }
            }

            
            String dicRaw = diccionarioContent.toString().trim();
            if (!dicRaw.isEmpty()) {
               
                String[] tempDic = splitCustom(dicRaw, '\n');
                
                int validWordCount = 0;
                for (String s : tempDic) {
                    if (!s.trim().isEmpty()) {
                        validWordCount++;
                    }
                }
                this.diccionario = new String[validWordCount];
                int currentIdx = 0;
                for (String s : tempDic) {
                    if (!s.trim().isEmpty()) {
                        this.diccionario[currentIdx++] = s.trim();
                    }
                }

            } else {
                this.diccionario = new String[0];
            }

          
            if (tableroContentLine == null || tableroContentLine.isEmpty()) {
                throw new Exception("La sección 'tab' del archivo no contiene datos de tablero.");
            }

            System.out.println("DEBUG: Llamando splitCustom con la línea final del tablero: [" + tableroContentLine + "]");
            String[] letrasArray = splitCustom(tableroContentLine, ',');

            System.out.println("DEBUG: splitCustom devolvió " + letrasArray.length + " elementos.");
            if (letrasArray.length > 0) {
                System.out.println("DEBUG: Primer elemento de letrasArray: [" + letrasArray[0] + "]");
            }

            int expectedSize = 16;
            int rows = 4;
            int cols = 4;

            this.tablero = new char[rows][cols];

            if (letrasArray.length != expectedSize) {
                throw new Exception("El tablero no tiene " + expectedSize + " letras (4x4). Se encontraron " + letrasArray.length + ".");
            }

            for (int i = 0; i < expectedSize; i++) {
               
                if (letrasArray[i] != null && !letrasArray[i].trim().isEmpty()) { 
                    this.tablero[i / cols][i % cols] = Character.toUpperCase(letrasArray[i].trim().charAt(0)); 
                } else {
                    throw new Exception("Caracter vacío o nulo encontrado en el tablero en la posición " + i + ".");
                }
            }

          
            this.grafo = new EDD.Grafo(this.tablero, rows, cols); 

           
        } finally {
            if (br != null) {
                br.close();
            }
        }
    }
    /**
     * Implementación personalizada del método `split` para dividir una cadena
     * por un delimitador dado. A diferencia de `String.split()`, esta versión
     * maneja específicamente el trim de cada elemento y es compatible con el entorno.
     *
     * @param text La cadena de texto a dividir.
     * @param delimiter El carácter delimitador.
     * @return Un arreglo de Strings que contiene las partes de la cadena dividida.
     */
    
    
    private String[] splitCustom(String text, char delimiter) {
        int count = 0;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == delimiter) {
                count++;
            }
        }
        String[] result = new String[count + 1];
        int currentElement = 0;
        int start = 0;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == delimiter) {
                result[currentElement++] = text.substring(start, i).trim();
                start = i + 1;
            }
        }

        result[currentElement] = text.substring(start).trim();
        return result;
    }
    /**
     * Cuenta el número de líneas no vacías en un texto.
     * (Este método no parece ser directamente usado en la lógica actual de carga
     * de diccionario, ya que se usa `splitCustom` con `\n` y luego se filtran vacíos.
     * Podría ser un remanente o para futuras validaciones).
     *
     * @param texto La cadena de texto a analizar.
     * @return El número de líneas no vacías.
     */
                                                      
    private int contarLineas(String texto) {
        if (texto == null || texto.isEmpty()) {
            return 0;
        }
        int count = 0;
        boolean previousCharIsNewline = true;
        for (int i = 0; i < texto.length(); i++) {
            if (texto.charAt(i) == '\n') {
                previousCharIsNewline = true;
            } else if (previousCharIsNewline) {
                count++;
                previousCharIsNewline = false;
            }
        }
        return count;
    }

    

    
     private void mostrarTableroEnGUI() {
        StringBuilder sb = new StringBuilder();
        if (tablero != null) {
            for (int r = 0; r < tablero.length; r++) { 
                for (int c = 0; c < tablero[0].length; c++) { 
                    sb.append(tablero[r][c]).append(" ");
                }
                sb.append("\n");
            }
        }
        textAreaTablero.setText(sb.toString());
    }
     
     /**
     * Muestra el contenido del diccionario en el `textAreaDiccionario` de la GUI.
     * Cada palabra del diccionario se muestra en una línea separada.
     */
    private void mostrarDiccionarioEnGUI() {
        StringBuilder sb = new StringBuilder();
        if (diccionario != null) {
            for (int i = 0; i < diccionario.length; i++) {
                if (diccionario[i] != null && !diccionario[i].isEmpty()) {
                    sb.append(diccionario[i]).append("\n");
                }
            }
        }
        textAreaDiccionario.setText(sb.toString());
        
       
    }




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonCargarArchivo;
    private javax.swing.JButton botonContinuar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea textAreaDiccionario;
    private javax.swing.JTextArea textAreaTablero;
    // End of variables declaration//GEN-END:variables
  }