
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaces;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import EDD.Grafo;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Gloria
 */

    
  public class Cargar extends javax.swing.JFrame {

    public Grafo grafo;
    public String[] diccionario;
    public char[][] tablero;
    private int cantidadPalabrasDiccionario; 
    private String rutaArchivoDiccionario; 

    public Cargar() {
        initComponents();
        this.setLocationRelativeTo(null); 
        this.setResizable(false); 
        this.diccionario = new String[100]; 
        this.cantidadPalabrasDiccionario = 0;
        this.rutaArchivoDiccionario = null;
        
    }
    public String[] getDiccionario() {
        return diccionario;
    }

    public int getCantidadPalabrasDiccionario() {
        return cantidadPalabrasDiccionario;
    }

    public String getRutaArchivoDiccionario() {
        return rutaArchivoDiccionario;
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        botonCargarArchivo = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaTablero = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaDiccionario = new javax.swing.JTextArea();
        botonContinuar = new javax.swing.JButton();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("cargar sopa de letras y diccionario");

        botonCargarArchivo.setText("Cargar Archivo...");
        botonCargarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCargarArchivoActionPerformed(evt);
            }
        });

        jLabel4.setText("Tablero 4x4");

        jLabel5.setText("Diccionario:");

        textAreaTablero.setEditable(false);
        textAreaTablero.setColumns(20);
        textAreaTablero.setRows(5);
        jScrollPane1.setViewportView(textAreaTablero);

        textAreaDiccionario.setEditable(false);
        textAreaDiccionario.setColumns(20);
        textAreaDiccionario.setRows(5);
        jScrollPane2.setViewportView(textAreaDiccionario);

        botonContinuar.setText("continuar");
        botonContinuar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContinuarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(109, 109, 109))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(botonCargarArchivo))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(jLabel1)))
                .addContainerGap(348, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(botonContinuar))
                .addGap(49, 49, 49))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonCargarArchivo)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botonContinuar)
                .addGap(0, 21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Maneja el evento de acción del botón "Cargar Archivo...".
     * Abre un `JFileChooser` para que el usuario seleccione un archivo.
     * Si se selecciona un archivo, intenta leerlo y procesar su contenido
     * para cargar el tablero y el diccionario. Muestra mensajes de éxito o error.
     *
     * @param evt El evento de acción generado por el botón.
     */
    private void botonCargarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCargarArchivoActionPerformed
       
    JFileChooser selectorArchivo = new JFileChooser();
        selectorArchivo.setFileFilter(new FileNameExtensionFilter("Archivos de Texto (*.txt)", "txt"));
        int seleccion = selectorArchivo.showOpenDialog(this);

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File archivoElegido = selectorArchivo.getSelectedFile();
            this.rutaArchivoDiccionario = archivoElegido.getAbsolutePath(); 

            
            this.diccionario = new String[100]; 
            this.cantidadPalabrasDiccionario = 0;

            try {
                leerArchivoDeConfiguracion(archivoElegido);
                mostrarTableroEnPantalla();
                mostrarDiccionarioEnPantalla();
                JOptionPane.showMessageDialog(this, "Archivo cargado exitosamente.", "Carga Completa", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al leer el archivo: " + e.getMessage(), "Error de Archivo", JOptionPane.ERROR_MESSAGE);
                System.err.println("Error de IO al cargar archivo: " + e.getMessage());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                System.err.println("Error general al cargar archivo: " + e.getMessage());

            }
        }
    

    
    }//GEN-LAST:event_botonCargarArchivoActionPerformed

    
    /**
     * Maneja el evento de acción del botón "Continuar".
     * Verifico si el grafo, tablero y diccionario se han cargado correctamente.
     * Si es así, oculta la ventana actual y muestra el `Menu` principal,
     * pasándose a sí mismo (`this`) para que `Menu` pueda acceder a los datos cargados.
     * Si los datos no están completos, muestra una advertencia al usuario.
     *
     * @param evt El evento de acción generado por el botón.
     */
    
    private void botonContinuarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContinuarActionPerformed
       
 // 
        if (grafo != null && tablero != null && diccionario != null && cantidadPalabrasDiccionario > 0) {
            this.setVisible(false);

            Menu menuPrincipal = new Menu(this);
            menuPrincipal.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Debe cargar un archivo válido (con tablero y diccionario) antes de continuar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    
    }//GEN-LAST:event_botonContinuarActionPerformed
/**
     * Método principal para iniciar la aplicación.
     * Configura el Look and Feel de la interfaz de usuario a "Nimbus" para una apariencia moderna.
     * Crea y muestra una nueva instancia de `Cargar` en el Event Dispatch Thread (EDT).
     *
     * @param args Los argumentos de la línea de comandos.
     */
    
    public static void main(String args[]) {
       try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
         } catch (ClassNotFoundException ex) {
          
            System.err.println("Error: ClassNotFoundException: " + ex.getMessage());
        } catch (InstantiationException ex) {
           
            System.err.println("Error: InstantiationException: " + ex.getMessage());
        } catch (IllegalAccessException ex) {
            
            System.err.println("Error: IllegalAccessException: " + ex.getMessage());
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
          
            System.err.println("Error: UnsupportedLookAndFeelException: " + ex.getMessage());
        }
        //</editor-fold>

        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cargar().setVisible(true);
            }
        });
}
    
    
    
    /**
     * Lee y procesa el contenido de un archivo de configuración para extraer
     * el tablero de la sopa de letras y el diccionario de palabras.
     * El archivo debe seguir un formato específico con secciones `tab` y `dic`.
     *
     * @param archivo El objeto `File` que representa el archivo a leer.
     * @throws IOException Si ocurre un error de lectura/escritura del archivo.
     * @throws Exception Si el formato del archivo es incorrecto (ej. tablero no 4x4, datos faltantes).
     */
    
    private void leerArchivoDeConfiguracion(File archivo) throws IOException, Exception {
        BufferedReader lector = null;
        String line;

        boolean inDic = false;
        boolean inTab = false;

        StringBuilder contenidoDiccionario  = new StringBuilder(); 
        String lineaTablero  = null;

        try {
            lector = new BufferedReader(new FileReader(archivo));
            while ((line = lector.readLine()) != null) {
                line = line.trim();

                if (line.isEmpty()) {
                    continue;
                }

                System.out.println("DEBUG: Leyendo línea: [" + line + "]"); // DEBUG

                if (line.equals("dic")) {
                    inDic = true;
                    inTab = false;
                    System.out.println("DEBUG: Entrando en sección dic."); // DEBUG
                    continue;
                } else if (line.equals("/dic")) {
                    inDic = false;
                    System.out.println("DEBUG: Saliendo de sección dic."); // DEBUG
                    continue;
                } else if (line.equals("tab")) {
                    inTab = true;
                    inDic = false;
                    lineaTablero = null;
                    System.out.println("DEBUG: Entrando en sección tab."); // DEBUG
                    continue;
                } else if (line.equals("/tab")) {
                    inTab = false;
                    System.out.println("DEBUG: Saliendo de sección tab."); // DEBUG
                    continue;
                }

                if (inDic) {
                    contenidoDiccionario.append(line).append("\n"); // Acumula todas las líneas del diccionario
                } else if (inTab) {
                    if (lineaTablero != null) {
                        throw new Exception("Se encontró más de una línea de tablero dentro de la sección 'tab'. Se espera solo una línea de 16 caracteres separados por comas.");
                    }
                    lineaTablero = line;
                    System.out.println("DEBUG: Contenido de tablero leido (temporal): [" + lineaTablero + "]"); // DEBUG
                }
            }

            
            String dicRaw = contenidoDiccionario.toString().trim();
            if (!dicRaw.isEmpty()) {
                String[] tempDicWords = dividirCadena(dicRaw, '\n'); 

                
                int validWordCount = 0;
                for (int i = 0; i < tempDicWords.length; i++) {
                    String s = tempDicWords[i];
                    if (s != null && !s.trim().isEmpty()) {
                        validWordCount++;
                    }
                }

                // Redimensionar el diccionario si el número de palabras cargadas excede el tamaño actual del arreglo
                if (validWordCount > this.diccionario.length) {
                    redimensionarDiccionario(validWordCount); // Asegura que haya suficiente espacio
                }

                // Llenar el diccionario con las palabras válidas y actualizar el contador
                this.cantidadPalabrasDiccionario = 0; // Resetear el contador para llenar desde cero
                for (int i = 0; i < tempDicWords.length; i++) {
                    String s = tempDicWords[i];
                    if (s != null && !s.trim().isEmpty()) {
                        this.diccionario[this.cantidadPalabrasDiccionario++] = s.trim().toUpperCase(); // Almacenar en mayúsculas
                    }
                }
            } else {
                
                this.diccionario = new String[100]; // Mantener un tamaño base
                this.cantidadPalabrasDiccionario = 0;
            }
          

           
            if (lineaTablero == null || lineaTablero.isEmpty()) {
                throw new Exception("La sección 'tab' del archivo no contiene datos de tablero. Debe haber 16 caracteres separados por comas.");
            }

            System.out.println("DEBUG: Contenido final de la línea del tablero: [" + lineaTablero + "]"); 
            String[] letrasArray = dividirCadena(lineaTablero, ',');

            System.out.println("DEBUG: Elementos obtenidos del split custom para el tablero (length: " + letrasArray.length + "):");
            for (int j = 0; j < letrasArray.length; j++) { 
                String currentElement = letrasArray[j];
                String trimmedElement = (currentElement != null ? currentElement.trim() : "NULL_VALUE");
                boolean isEmptyAfterTrim = trimmedElement.isEmpty();
               
            } 

            int expectedSize = 16;
            int rows = 4;
            int cols = 4;

            this.tablero = new char[rows][cols];

            if (letrasArray.length != expectedSize) {
                throw new Exception("El tablero no tiene " + expectedSize + " letras (4x4). Se encontraron " + letrasArray.length + ". Revise la línea en la sección 'tab'.");
            }

            for (int i = 0; i < expectedSize; i++) {
                String cellContent = letrasArray[i]; 
                if (cellContent != null && !cellContent.trim().isEmpty()) {
                    this.tablero[i / cols][i % cols] = Character.toUpperCase(cellContent.trim().charAt(0));
                } else {
                   
                    throw new Exception("Caracter vacío o nulo encontrado en el tablero en la posición " + i + ".\nPor favor, asegúrese de que cada celda contenga una letra válida (ej: A,B,C,D...) y no haya entradas vacías (ej: ',,') o con solo espacios (ej: ', ,').");
                }
            }

            this.grafo = new EDD.Grafo(this.tablero, rows, cols); 

        } finally {
            if (lector != null) {
                lector.close();
            }
        }
    }
    /**
     * Redimensiona el arreglo del diccionario a un nuevo tamaño.
     * Si el nuevo tamaño es menor que la cantidad de palabras actual,
     * se truncarán las palabras (¡evitar esto!). Se recomienda usar un tamaño mayor.
     * Crea un nuevo arreglo, copia los elementos existentes y actualiza la referencia.
     *
     * @param tamanoMinimoRequerido El tamaño mínimo que necesita el arreglo (ej. cantidad de palabras + 1).
     */
     private void redimensionarDiccionario(int tamanoMinimoRequerido) {
        
        int nuevoTamanio = Math.max(this.diccionario.length * 2, tamanoMinimoRequerido);
        System.out.println("DEBUG: Redimensionando diccionario de " + this.diccionario.length + " a " + nuevoTamanio + " elementos.");
        String[] nuevoDiccionario = new String[nuevoTamanio];

        
        for (int i = 0; i < this.cantidadPalabrasDiccionario; i++) {
            nuevoDiccionario[i] = this.diccionario[i];
        }
        this.diccionario = nuevoDiccionario; // Asignar el nuevo arreglo
    }
    /**
     * Agrega una palabra al diccionario.
     * Convierte la palabra a mayúsculas y la agrega si no existe y hay espacio.
     * Si el diccionario está lleno, lo redimensiona automáticamente.
     * Después de agregar, guarda el diccionario actualizado en el archivo.
     *
     * @param palabra La palabra a agregar.
     */
    public void agregarPalabraAlDiccionario(String palabra) {
        String palabraNormalizada = palabra.trim().toUpperCase();

       
        boolean yaExiste = false;
        for (int i = 0; i < cantidadPalabrasDiccionario; i++) {
            if (diccionario[i] != null && diccionario[i].equals(palabraNormalizada)) {
                yaExiste = true;
                break;
            }
        }

        if (!yaExiste) {
            
            if (cantidadPalabrasDiccionario >= diccionario.length) {
                JOptionPane.showMessageDialog(this, "El diccionario está lleno. Redimensionando...", "Información", JOptionPane.INFORMATION_MESSAGE);
                redimensionarDiccionario(cantidadPalabrasDiccionario + 1); 
            }

           
            diccionario[cantidadPalabrasDiccionario] = palabraNormalizada;
            cantidadPalabrasDiccionario++;
            JOptionPane.showMessageDialog(this, "La palabra '" + palabra + "' ha sido agregada al diccionario.", "Palabra Agregada", JOptionPane.INFORMATION_MESSAGE);

          
            guardarDiccionarioEnArchivo();
            mostrarDiccionarioEnPantalla(); 
        } else {
            JOptionPane.showMessageDialog(this, "La palabra '" + palabra + "' ya existe en el diccionario.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }

    
    /**
     * Lee todo el contenido de un archivo a una cadena String.
     * @param file Archivo a leer.
     * @return Contenido del archivo como String.
     * @throws IOException Si ocurre un error de lectura.
     */
    private String leerArchivoCompleto(File file) throws IOException {
        StringBuilder constructorCadena = new StringBuilder();
        BufferedReader lector = null;
        try {
            lector = new BufferedReader(new FileReader(file));
            String line;
            while ((line = lector.readLine()) != null) {
                constructorCadena.append(line).append(System.lineSeparator());
            }
        } finally {
            if (lector != null) {
                try {
                    lector.close();
                } catch (IOException e) {
                    System.err.println("Error al cerrar BufferedReader: " + e.getMessage());
                }
            }
        }
        return constructorCadena.toString();
    }

    /**
     * Guarda el contenido actual del diccionario y el tablero en el archivo desde el que fue cargado.
     * Requiere que `rutaArchivoDiccionario` esté configurado (es decir, que ya se haya cargado un archivo antes).
     * Este método lee el archivo original, actualiza las secciones 'tab' y 'dic' y luego reescribe todo el archivo.
     */
    private void guardarDiccionarioEnArchivo() {
        if (rutaArchivoDiccionario != null && !rutaArchivoDiccionario.isEmpty()) {
            try {
                
                String contenidoOriginal = leerArchivoCompleto(new File(rutaArchivoDiccionario));

                String nuevaSeccionTablero = "";
               
                if (tablero != null) {
                    StringBuilder lineaTab = new StringBuilder();
                    for (int r = 0; r < tablero.length; r++) {
                        for (int c = 0; c < tablero[0].length; c++) {
                            lineaTab.append(tablero[r][c]);
                            if (!(r == tablero.length - 1 && c == tablero[0].length - 1)) {
                                lineaTab.append(",");
                            }
                        }
                    }
                    if (lineaTab.length() > 0 && lineaTab.charAt(lineaTab.length() - 1) == ',') {
                        lineaTab.setLength(lineaTab.length() - 1);
                    }
                    nuevaSeccionTablero = "tab" + System.lineSeparator() +
                                           lineaTab.toString() + System.lineSeparator() +
                                           "/tab";
                }

                String nuevaSeccionDiccionario  = "";
              
                StringBuilder contenidoDic  = new StringBuilder();
                for (int i = 0; i < cantidadPalabrasDiccionario; i++) {
                    if (diccionario[i] != null) {
                        contenidoDic .append(diccionario[i]).append(System.lineSeparator());
                    }
                }
                nuevaSeccionDiccionario = "dic" + System.lineSeparator() +
                                       contenidoDic .toString() +
                                       "/dic";


                StringBuilder contenidoFinal = new StringBuilder();
                int inicioTab = contenidoOriginal.indexOf("tab");
                int finTab = contenidoOriginal.indexOf("/tab");
                int inicioDic = contenidoOriginal.indexOf("dic");
                int finDic = contenidoOriginal.indexOf("/dic");

               
                boolean tabManejado = false;
                boolean dicManejado = false;

                
                if (inicioTab != -1 && finTab != -1 && finTab > inicioTab && inicioDic != -1 && finDic != -1 && finDic > inicioDic) {
                    if (inicioTab < inicioDic) { 
                        contenidoFinal.append(contenidoOriginal.substring(0, inicioTab));
                        contenidoFinal.append(nuevaSeccionTablero).append(System.lineSeparator());
                        tabManejado = true;
                        
                        contenidoFinal.append(contenidoOriginal.substring(finTab + "/tab".length(), inicioDic));
                        contenidoFinal.append(nuevaSeccionDiccionario).append(System.lineSeparator());
                        dicManejado = true;
                        
                        contenidoFinal.append(contenidoOriginal.substring(finDic + "/dic".length()));
                    } else { 
                        contenidoFinal.append(contenidoOriginal.substring(0, inicioDic));
                        contenidoFinal.append(nuevaSeccionDiccionario).append(System.lineSeparator());
                        dicManejado = true;
                        
                       
                        contenidoFinal.append(contenidoOriginal.substring(finDic + "/dic".length(), inicioTab));
                        contenidoFinal.append(nuevaSeccionTablero).append(System.lineSeparator());
                        tabManejado = true;
                        
                        
                        contenidoFinal.append(contenidoOriginal.substring(finTab + "/tab".length()));
                    }
                } else { 
                    contenidoFinal.append(contenidoOriginal);
                }

                
                if (!tabManejado && tablero != null) {
                    contenidoFinal.append(System.lineSeparator()).append(nuevaSeccionTablero).append(System.lineSeparator());
                }
                if (!dicManejado) {
                    contenidoFinal.append(System.lineSeparator()).append(nuevaSeccionDiccionario).append(System.lineSeparator());
                }

               
                try (FileWriter escritor = new FileWriter(rutaArchivoDiccionario, false)) { 
                    escritor.write(contenidoFinal.toString());
                }

                JOptionPane.showMessageDialog(this, "Archivo actualizado con éxito.", "Guardado", JOptionPane.INFORMATION_MESSAGE);

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al guardar el archivo: " + e.getMessage(), "Error de I/O", JOptionPane.ERROR_MESSAGE);
                System.err.println("Error al guardar la configuración: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se ha cargado un archivo, no se puede guardar.", "Error al Guardar", JOptionPane.WARNING_MESSAGE);
        }
    }


    /**
     * Implementación personalizada del método `split` para dividir una cadena
     * por un delimitador dado. A diferencia de `String.split()`, esta versión
     * maneja específicamente el trim de cada elemento y es compatible con el entorno.
     *
     * @param text La cadena de texto a dividir.
     * @param delimiter El carácter delimitador.
     * @return Un arreglo de Strings que contiene las partes de la cadena dividida.
     */
    private String[] dividirCadena(String texto, char delimitador) {
        if (texto == null || texto.isEmpty()) {
            return new String[0]; 
        }
        
        
        int contadorPartes = 1;
        for (int i = 0; i < texto.length(); i++) {
            if (texto.charAt(i) == delimitador) {
                contadorPartes++;
            }
        }
        
        String[] resultado = new String[contadorPartes];
        int indiceParteActual = 0;
        int inicioParte = 0;
        
        for (int i = 0; i < texto.length(); i++) {
            if (texto.charAt(i) == delimitador) {
                String parte = texto.substring(inicioParte, i);
                resultado[indiceParteActual] = parte.trim(); 
                indiceParteActual++;
                inicioParte = i + 1; 
            }
        }
        String ultimaParte = texto.substring(inicioParte);
        resultado[indiceParteActual] = ultimaParte.trim();
        
        return resultado;
    }


    /**
     * Cuenta el número de líneas no vacías en un texto.
     * (Este método no se usa directamente en la lógica de carga de diccionario actual,
     * ya que se usa `dividirCadena` con `\n` y luego se filtran vacíos. Podría ser para futuras validaciones).
     *
     * @param texto La cadena de texto a analizar.
     * @return El número de líneas no vacías.
     */
    private int contarLineas(String texto) {
        if (texto == null || texto.isEmpty()) {
            return 0;
        }
        int count = 0;
        boolean previousCharIsNewline = true;
        for (int i = 0; i < texto.length(); i++) {
            if (texto.charAt(i) == '\n') {
                previousCharIsNewline = true;
            } else if (previousCharIsNewline && !Character.isWhitespace(texto.charAt(i))) { 
                count++;
                previousCharIsNewline = false;
            }
        }
        return count;
    }

    private void mostrarTableroEnPantalla() {
        if (tablero == null) {
            textAreaTablero.setText("Tablero no cargado.");
            return;
        }
        StringBuilder textoAMostrar = new StringBuilder();
        for (int fila = 0; fila < tablero.length; fila++) {
            for (int col = 0; col < tablero[fila].length; col++) {
                textoAMostrar.append(tablero[fila][col]).append(" "); 
            }
            textoAMostrar.append("\n"); 
        }
        textAreaTablero.setText(textoAMostrar.toString());
    }

    /**
     * Muestra el contenido del diccionario en el `textAreaDiccionario` de la GUI.
     * Cada palabra del diccionario se muestra en una línea separada.
     */
     private void mostrarDiccionarioEnPantalla() {
        if (diccionario == null || cantidadPalabrasDiccionario == 0) {
            textAreaDiccionario.setText("Diccionario vacío.");
            return;
        }
        StringBuilder textoAMostrar = new StringBuilder();
        for (int i = 0; i < cantidadPalabrasDiccionario; i++) {
            if (diccionario[i] != null) {
                textoAMostrar.append(diccionario[i]).append("\n"); 
            }
        }
        textAreaDiccionario.setText(textoAMostrar.toString());
    }






    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonCargarArchivo;
    private javax.swing.JButton botonContinuar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea textAreaDiccionario;
    private javax.swing.JTextArea textAreaTablero;
    // End of variables declaration//GEN-END:variables
  }