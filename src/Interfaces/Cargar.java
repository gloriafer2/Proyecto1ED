
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaces;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import EDD.Grafo;

/**
 *
 * @author Gloria
 */

    
  public class Cargar extends javax.swing.JFrame {

    public Grafo grafo;
    public String[] diccionario;
    public char[][] tablero;


    /**
     * Crea una nueva instancia de la clase {@code Cargar}.
     * Inicializa los componentes y configura la ventana.
     */
    public Cargar() {
        initComponents();
        this.setLocationRelativeTo(null); // Centra la ventana
        this.setResizable(false); // No redimensionable
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        botonCargarArchivo = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaTablero = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaDiccionario = new javax.swing.JTextArea();
        botonContinuar = new javax.swing.JButton();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("cargar sopa de letras y diccionario");

        botonCargarArchivo.setText("Cargar Archivo...");
        botonCargarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCargarArchivoActionPerformed(evt);
            }
        });

        jLabel4.setText("Tablero 4x4");

        jLabel5.setText("Diccionario:");

        textAreaTablero.setEditable(false);
        textAreaTablero.setColumns(20);
        textAreaTablero.setRows(5);
        jScrollPane1.setViewportView(textAreaTablero);

        textAreaDiccionario.setEditable(false);
        textAreaDiccionario.setColumns(20);
        textAreaDiccionario.setRows(5);
        jScrollPane2.setViewportView(textAreaDiccionario);

        botonContinuar.setText("continuar");
        botonContinuar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContinuarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(109, 109, 109))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(botonCargarArchivo))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(jLabel1)))
                .addContainerGap(348, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(botonContinuar))
                .addGap(49, 49, 49))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonCargarArchivo)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botonContinuar)
                .addGap(0, 21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonCargarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCargarArchivoActionPerformed
        // TODO add your handling code here:
    JFileChooser fileChooser = new JFileChooser();
        int seleccion = fileChooser.showOpenDialog(this);

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File archivo = fileChooser.getSelectedFile();
            try {
                leerArchivoDeConfiguracion(archivo);
                mostrarTableroEnGUI();
                mostrarDiccionarioEnGUI();
                JOptionPane.showMessageDialog(this, "Archivo cargado exitosamente.", "Carga Completa", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al leer el archivo: " + e.getMessage(), "Error de Archivo", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }
    }//GEN-LAST:event_botonCargarArchivoActionPerformed

    private void botonContinuarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContinuarActionPerformed
        // TODO add your handling code here:
 if (grafo != null && tablero != null && diccionario != null && diccionario.length > 0) {
            this.setVisible(false);
            // Pasa 'this' (la instancia actual de Cargar) al constructor de Menu
            Menu menuPrincipal = new Menu(this);
            menuPrincipal.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Debe cargar un archivo v√°lido antes de continuar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_botonContinuarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cargar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cargar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cargar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cargar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cargar().setVisible(true);
            }
        });
    }
    
    //GEN-LAST:event_botonCargarArchivoActionPerformed

    /**
     * Acci√≥n realizada al presionar el bot√≥n "Continuar al Men√∫".
     * Oculta la ventana actual y muestra la ventana del Men√∫ principal,
     * pasando los datos cargados.
     * @param evt el evento de acci√≥n
     */
   

    /**
     * Lee el contenido de un archivo de texto para extraer el diccionario y el tablero.
     * Procesa las etiquetas "dic", "/dic", "tab", "/tab" para separar la informaci√≥n.
     * @param archivo El archivo a leer.
     * @throws IOException Si ocurre un error de lectura.
     * @throws Exception Si el formato del tablero es incorrecto.
     */
    private void leerArchivoDeConfiguracion(File archivo) throws IOException, Exception {
        BufferedReader br = null;
        String line;
        StringBuilder diccionarioBuilder = new StringBuilder();
        StringBuilder tableroBuilder = new StringBuilder();
        boolean inDic = false;
        boolean inTab = false;

        try {
            br = new BufferedReader(new FileReader(archivo));
            while ((line = br.readLine()) != null) {
                line = line.trim();

                if (line.equals("dic")) {
                    inDic = true;
                    continue;
                } else if (line.equals("/dic")) {
                    inDic = false;
                    continue;
                } else if (line.equals("tab")) {
                    inTab = true;
                    continue;
                } else if (line.equals("/tab")) {
                    inTab = false;
                    continue;
                }

                if (inDic) {
                    diccionarioBuilder.append(line).append("\n");
                } else if (inTab) {
                    tableroBuilder.append(line);
                }
            }

            // Procesa el diccionario (implementaci√≥n b√°sica sin java.util.split)
            String dicRaw = diccionarioBuilder.toString().trim();
            if (!dicRaw.isEmpty()) {
                String[] tempDic = new String[contarLineas(dicRaw)];
                int index = 0;
                int start = 0;
                for (int i = 0; i < dicRaw.length(); i++) {
                    if (dicRaw.charAt(i) == '\n') {
                        tempDic[index++] = dicRaw.substring(start, i).trim();
                        start = i + 1;
                    }
                }
                if (start < dicRaw.length()) { // A√±adir la √∫ltima palabra si no hay salto de l√≠nea al final
                    tempDic[index++] = dicRaw.substring(start).trim();
                }
                // Ajustar el tama√±o del array si hay elementos null al final (por l√≠neas vac√≠as, etc.)
                String[] finalDic = new String[index];
                for(int i = 0; i < index; i++){
                    finalDic[i] = tempDic[i];
                }
                this.diccionario = finalDic;

            } else {
                this.diccionario = new String[0];
            }

            // Procesa el tablero (implementaci√≥n b√°sica sin java.util.split)
            String tabRaw = tableroBuilder.toString();
            String[] letrasArray = splitCustom(tabRaw, ',');
            this.tablero = new char[4][4];
            if (letrasArray.length != 16) {
                throw new Exception("El tablero no tiene 16 letras (4x4). Se encontraron " + letrasArray.length + ".");
            }
            for (int i = 0; i < 16; i++) {
                if (letrasArray[i] != null && !letrasArray[i].isEmpty()) {
                    this.tablero[i / 4][i % 4] = letrasArray[i].charAt(0);
                } else {
                    throw new Exception("Caracter vac√≠o encontrado en el tablero.");
                }
            }
            
            construirGrafo();

        } finally {
            if (br != null) {
                br.close();
            }
        }
    }

    /**
     * Implementaci√≥n b√°sica de split para String sin usar java.util.String.split().
     * Separa una cadena por un delimitador espec√≠fico.
     * @param text La cadena a separar.
     * @param delimiter El car√°cter delimitador.
     * @return Un arreglo de cadenas resultantes.
     */
    private String[] splitCustom(String text, char delimiter) {
        int count = 0;
        // Contar delimitadores para determinar el tama√±o del array resultante
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == delimiter) {
                count++;
            }
        }
        // El n√∫mero de elementos ser√° (n√∫mero de delimitadores + 1)
        String[] result = new String[count + 1];
        int currentElement = 0;
        int start = 0;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == delimiter) {
                result[currentElement++] = text.substring(start, i).trim();
                start = i + 1;
            }
        }
        // A√±adir el √∫ltimo elemento despu√©s del √∫ltimo delimitador
        result[currentElement] = text.substring(start).trim(); 
        return result;
    }
    
    /**
     * Cuenta el n√∫mero de l√≠neas en un texto, asumiendo que cada salto de l√≠nea
     * indica una nueva l√≠nea, y que una l√≠nea existe si el texto no est√° vac√≠o.
     * @param texto El texto a contar las l√≠neas.
     * @return El n√∫mero de l√≠neas.
     */
    private int contarLineas(String texto) {
        if (texto == null || texto.isEmpty()) {
            return 0;
        }
        int count = 0;
        // Cuenta el n√∫mero de palabras basado en los saltos de l√≠nea
        // Mejorado para manejar casos donde la √∫ltima l√≠nea no tiene un salto de l√≠nea
        boolean previousCharIsNewline = true; // Assume start of string is like a newline
        for (int i = 0; i < texto.length(); i++) {
            if (texto.charAt(i) == '\n') {
                previousCharIsNewline = true;
            } else if (previousCharIsNewline) {
                count++;
                previousCharIsNewline = false;
            }
        }
        return count;
    }

    /**
     * Construye el grafo no dirigido a partir del tablero 4x4.
     * Cada celda del tablero es un v√©rtice, y las celdas adyacentes
     * (horizontal, vertical, diagonal) tienen una arista.
     */
    private void construirGrafo() {
        this.grafo = new Grafo(16); // Tablero 4x4 tiene 16 v√©rtices

        // Direcciones para moverse (horizontal, vertical, diagonal)
        int[] dr = {-1, -1, -1,  0, 0,  1, 1, 1}; // Cambios en la fila
        int[] dc = {-1,  0,  1, -1, 1, -1, 0, 1}; // Cambios en la columna

        for (int r = 0; r < 4; r++) {
            for (int c = 0; c < 4; c++) {
                int u = r * 4 + c; // Calcula el √≠ndice del v√©rtice actual (0-15)

                for (int i = 0; i < 8; i++) { // Iterar sobre las 8 posibles direcciones
                    int newR = r + dr[i];
                    int newC = c + dc[i];

                    // Verificar si el nuevo vecino est√° dentro de los l√≠mites del tablero
                    if (newR >= 0 && newR < 4 && newC >= 0 && newC < 4) {
                        int v = newR * 4 + newC; // Calcula el √≠ndice del v√©rtice vecino
                        grafo.agregarArista(u, v);
                    }
                }
            }
        }
    }

    /**
     * Muestra el contenido del tablero en el JTextArea correspondiente.
     */
    private void mostrarTableroEnGUI() {
        StringBuilder sb = new StringBuilder();
        if (tablero != null) {
            for (int r = 0; r < 4; r++) {
                for (int c = 0; c < 4; c++) {
                    sb.append(tablero[r][c]).append(" ");
                }
                sb.append("\n");
            }
        }
        textAreaTablero.setText(sb.toString());
    }

    /**
     * Muestra el contenido del diccionario en el JTextArea correspondiente.
     */
    private void mostrarDiccionarioEnGUI() {
        StringBuilder sb = new StringBuilder();
        if (diccionario != null) {
            for (int i = 0; i < diccionario.length; i++) {
                if (diccionario[i] != null && !diccionario[i].isEmpty()) {
                    sb.append(diccionario[i]).append("\n");
                }
            }
        }
        textAreaDiccionario.setText(sb.toString());
    }




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonCargarArchivo;
    private javax.swing.JButton botonContinuar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea textAreaDiccionario;
    private javax.swing.JTextArea textAreaTablero;
    // End of variables declaration//GEN-END:variables
  }